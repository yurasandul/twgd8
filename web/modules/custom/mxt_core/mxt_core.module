<?php

/**
 * @file
 * Contains mxt_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;

const JSON_DATA_MAP = [
  'questions' => 'tweet_page',
  'mass' => 'rites',
  'divine' => 'rites',
  'catholic' => 'rites',

  'testmonies' => 'testimonies',
  'aid' => 'spiritual_first_aid',
  'saints' => 'military_saints',
  'mprayers' => 'prayers',
  'pquotes' => 'papal_quotes',
  'iquotes' => 'inspirational_quotes',
  'homilies' => 'homilies_reflections',
];

const JSON_DATA_START_VERSION = '1.0';
const JSON_DATA_INCREMENT_VERSION = 0.1;
const JSON_DATA_CACHE_MAX_AGE = 86400;

/**
 * Implements hook_help().
 */
function mxt_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the mxt_core module.
    case 'help.page.mxt_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('MXT Core add function') . '</p>';
      return $output;

    default:
  }
}

function mtx_core_jp2_sortbytitlenumber($a, $b) {
  $a = mtx_core_jp2_converttitletosortable($a);
  $b = mtx_core_jp2_converttitletosortable($b);
  if ($a == $b) {
    return 0;
  }
  return ($a < $b) ? -1 : 1;
}

function mtx_core_jp2_converttitletosortable($title) {
  $title = explode(' ', $title);
  $title = $title[0];
  $parts = explode('.', $title);

  if (isset($parts[1])) {
    $sortable = $parts[0] . '.' . substr('00' . $parts[1], -3);
    return $sortable;
  }
  else {
    return $title;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function mxt_core_node_presave( NodeInterface $node) {
  $type = $node->getType();
  if ($type == 'rites' && $node->get('status')->value) {
    $key = 'json_version__' . $type . '__' . $node->id();
    mxt_core_set_next_version_number($key);
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['json_api:node:' . $type . ':' . $node->id()]);
  }
  elseif ($type == 'tweet_page' && $node->get('status')->value)  {
    $langcode = $node->get('langcode')->value;
    $key = 'json_version__' . $type . '__' . $langcode;
    mxt_core_set_next_version_number($key);
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['json_api:node:' . $type]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function mxt_core_taxonomy_term_presave(TermInterface $entity) {
  if ($entity->get('vid')->entity->id() == 'subject') {
    $key = 'json_version__tweet_page__' . $entity->get('langcode')->value;
    mxt_core_set_next_version_number($key);
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['json_api:texonomy_term:subject']);
  }
}

function mxt_core_set_next_version_number($key){
  $version = \Drupal::state()->get($key, '1.0');
  $new_version = number_format($version + JSON_DATA_INCREMENT_VERSION, 1);
  \Drupal::state()->set($key, $new_version);
}

/**
 * Implements hook_theme().
 */
function mxt_core_theme() {
  return [
    'frontpage_top_blocks' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
    'tweet_pager_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_query_TAG_alter().
 */
function mxt_core_query_search_node_search_alter(Drupal\Core\Database\Query\AlterableInterface $query) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $query->condition('n.langcode', $language, '=');
}

/**
 * Implements hook_form_alter().
 */
function mxt_core_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form_ids = [
    'node_push_message_edit_form',
    'node_push_message_form',
  ];
  if (in_array($form_id, $form_ids) && !in_array('administrator', \Drupal::currentUser()->getRoles())) {
    $form['field_sent']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mxt_core_form_dropdown_language_config_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::configFactory()->getEditable('mxt_core.dropdown_language');
  $default_values = $config->get('selected_language');

  $options = [];
  foreach (\Drupal::languageManager()->getLanguages() as $langcode => $language) {
    $options[$langcode] = $language->getName();
  }
  $form['selected_language'] = [
    '#type' => 'checkboxes',
    '#title' => t('Language in "Dropdown Language"'),
    '#options' => $options,
    '#default_value' => $default_values,
    '#multiple' => TRUE,
  ];
  $form['#submit'][] = 'mxt_core_form_dropdown_language_config_submit';
}

/**
 * Custom submit for "form_dropdown_language_config".
 *
 * @param array $form
 *   Array form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState Obj.
 */
function mxt_core_form_dropdown_language_config_submit(&$form, FormStateInterface $form_state) {
  $selected_language = $form_state->getValue('selected_language');
  $config = \Drupal::configFactory()->getEditable('mxt_core.dropdown_language');
  $config->set('selected_language', $selected_language)->save();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mxt_core_preprocess_views_view_unformatted__twg_all_tweets__page_1(&$variables) {
  $sort_array = [];
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  /** @var \Drupal\mxt_core\TwgApiHelper $twg_api_helper */
  $twg_api_helper = \Drupal::service('mxt_core.twg_api_helper');

  foreach ($variables['rows'] as $index => $row) {
    $node = $row["content"]["#row"]->_entity->getTranslation($langcode);
    $sort_array[(string) $index] = number_format($twg_api_helper->getPartsFromTitle($node->getTitle())['number'], 2);
  }
  asort($sort_array);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mxt_core_preprocess_views_view__twg_all_tweets__page_1(&$variables) {
  $groups_weight = [];
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  /** @var \Drupal\mxt_core\TwgApiHelper $twg_api_helper */
  $twg_api_helper = \Drupal::service('mxt_core.twg_api_helper');

  foreach ($variables['rows'] as $group_index => $row) {
    $sort_array[$group_index] = [];
    $group = [];
    $weight = 0;
    foreach ($row['#rows'] as $node_index => $node_row) {
      $node = $node_row["#row"]->_entity->getTranslation($langcode);
      $group[$node_index] = number_format($twg_api_helper->getPartsFromTitle($node->getTitle())['number'], 2);
      $weight += $twg_api_helper->getPartsFromTitle($node->getTitle())['number'];
    }
    asort($group);
    $groups_weight[(string) $group_index] = $weight / count($group);
    $group_sort = [];
    foreach ($group as $node_index => $node_number) {
      $group_sort[$node_index] = $row['#rows'][$node_index];
    }
    $variables['rows'][$group_index]["#rows"] = $group_sort;
  }
  asort($groups_weight);
  $old_result = $variables['rows'];
  $variables['rows'] = [];
  foreach ($groups_weight as $key => $weight) {
    $variables['rows'][] = $old_result[$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mxt_core_preprocess_field__node__body__tweet_page(&$variables) {
  /** @var \Drupal\mxt_core\TwgApiHelper $twg_api_helper */
  $twg_api_helper = \Drupal::service('mxt_core.twg_api_helper');

  $text = $variables['items'][0]['content']['#text'] ?? '';

  $data = $twg_api_helper->parseShortCodesQtip($text, TRUE);
  $variables['items'][0]['content']['#text'] = $data['content'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mxt_core_preprocess_block__dropdown_language(&$variables) {
  $config = \Drupal::configFactory()->getEditable('mxt_core.dropdown_language');
  $enabled_values = $config->get('selected_language');
  $languages = $variables['content']['dropdown-language']['switch-language']['#links'];

  $links = [];
  foreach ($enabled_values as $key => $values) {
    if (($values !== 0) && isset($languages[$key])) {
      $links[$key] = $languages[$key];
    }
  }
  $variables['content']['dropdown-language']['switch-language']['#links'] = $links;
}
