<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_html().
 */
function twg_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');
  // Body classes for sidebars.
  if (isset($variables['page']['sidebar_first']) && isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-both');
  }
  elseif (isset($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-first');
  }
  elseif (isset($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-second');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('body-sidebars-none');
  }
  // Alias path class.
  $alias_class = preg_replace("/\//", '-', $alias);
  if (!empty($alias_class) && strpos($alias_class, 'node') !== 0) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('alias--' . $alias_class);
  }
  // If is homepage.
  $variables['attributes']['class'][] = \Drupal::service('path.matcher')
    ->isFrontPage() ? 'frontpage' : '';
  // Node type class.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? 'nodetype--' . $variables['node_type'] : '';
  // Logged in class.
  $variables['attributes']['class'][] = $variables['logged_in'] ? 'logged-in' : 'logged-out';
}

/**
 * Implements hook_preprocess_page().
 */
function twg_preprocess_page(&$variables) {
  // Check if page is panel pages.
  $route_options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($route_options['parameters']['page_manager_page'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-panel');
  }
  else {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('page-standard');
  }
}

/**
 * Implements template_preprocess_block().
 */
function twg_preprocess_block(&$variables) {
  // Custom block type helper classes.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'][] = Html::cleanCssIdentifier('block--bundle-' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
    $variables['attributes']['class'][] = 'block--type--' . $bundle_class;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function twg_preprocess_node(&$variables) {
  // Helper variables for multiple nodes.
  if (!empty($variables['elements']['#entity_type'])) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('entity--type-' . $variables['elements']['#entity_type']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container and adds meta information.
 * Code borrowed from Seven theme.
 */
function twg_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $form['#theme'] = ['node_edit_form'];
  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? \Drupal::service('date.formatter')->format($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type'       => 'container',
    '#group'      => 'advanced',
    '#weight'     => -100,
    'published'   => [
      '#type'       => 'html_tag',
      '#tag'        => 'h3',
      '#value'      => $node->isPublished() ? t('Published') : t('Not published'),
      '#access'     => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed'     => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'entity-meta__last-saved',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author'      => [
      '#type'               => 'item',
      '#wrapper_attributes' => [
        'class' => [
          'author',
          'container-inline',
        ],
      ],
      '#markup'             => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()
        ->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_links__dropbutton__dropdown_language(&$variables) {
  foreach ($variables['links'] as $key => &$link) {
    $new_title = Markup::create('<span class="name">' . $link['link']['#title'] . '</span><span class="key">' . $key . '</span>');
    $link['link']['#title'] = $new_title;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_block__main_navigation_mobile(&$variables) {
  $qwe = 1;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_menu__main(&$variables) {
  foreach ($variables["items"] as &$item) {
    if ($item['is_expanded']) {
      $item['attributes']->addClass('expanded');
    }
    else {
      $item['attributes']->addClass('is_leaf');
    }
    foreach ($item['below'] as $item_second_lvel) {
      if ($item_second_lvel['in_active_trail']) {
        $item['attributes']->addClass('is-active');
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function twg_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_block__bottom_block(&$variables) {
  $block = $variables['content']['#block_content'];
  $text_color = !$block->get('field_text_color')->isEmpty() ? $block->get('field_text_color')->value : '';
  $background = !$block->get('field_background')->isEmpty() ? $block->get('field_background')->value : '';
  $text_display_mode = !$block->get('field_text_display_position')->isEmpty() ? $block->get('field_text_display_position')->value : 'top';

  $image_class = !$block->get('field_image')->isEmpty() ? 'contains-image' : 'no-image';
  $new_window = !$block->get('field_open_new_window')->isEmpty() ? $block->get('field_open_new_window')->value : '';

  $variables['text_color'] = $text_color;
  $variables['background'] = $background;
  $variables['text_display_mode'] = $text_display_mode;
  $variables['new_window'] = $new_window;
  $variables['image_class'] = $image_class;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_paragraph__quote_slider__default(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['elements']['#paragraph'];
  if (!$paragraph->get('field_quotes')->isEmpty() && ($paragraph->get('field_quotes')->value == 1)) {
    $variables["content"]["field_slogan"]["#attributes"]['class'][] = 'quotes';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_region__front_top(&$variables) {
  if (isset($variables["elements"]["frontpage_top_block_2"]["content"]) && isset($variables["elements"]["frontpage_top_block_1"]["content"])) {
    $variables['attributes']['class'][] = 'col-2';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function twg_preprocess_captcha(&$variables) {
  $variables['element']['#description_display'] = 'before';
}

function twg_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#name'];
  }
}
